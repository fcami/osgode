/*!
 * @file CharacterController
 * @author Rocco Martino
 */
/***************************************************************************
 *   Copyright (C) 2013 by Rocco Martino                                   *
 *   martinorocco@gmail.com                                                *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Lesser General Public License as        *
 *   published by the Free Software Foundation; either version 2.1 of the  *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU Lesser General Public License for more details.                   *
 *                                                                         *
 *   You should have received a copy of the GNU Lesser General Public      *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#ifndef _OSGODE_CHARACTERCONTROLLER_HPP
#define _OSGODE_CHARACTERCONTROLLER_HPP




/* ======================================================================= */
#include <osgGA/GUIEventHandler>
/* ======================================================================= */




namespace osgODE
{




/* ======================================================================= */
class Character ;
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
//!
/*!
 *
 */
class OSG_EXPORT CharacterController: public osgGA::GUIEventHandler
{
/* ======================================================================= */
public:
             CharacterController(Character* character = NULL) ;
             CharacterController(const CharacterController& other, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY) ;

protected:
    virtual ~CharacterController(void) ;
/* ======================================================================= */









/* ======================================================================= */
    class OSG_EXPORT Keys
    {
    public:
        Keys(void) ;
        Keys(const Keys& other) ;

        //! w
        int     MoveFront ;

        //! s
        int     MoveBack ;

        //! a
        int     MoveLeft ;

        //! d
        int     MoveRight ;

        //! KEY_Space
        int     Jump ;

        //! LMB
        int     PrimaryAction ;

        //! RMB
        int     SecondaryAction ;
    } ;
/* ======================================================================= */




/* ======================================================================= */
public:
    META_Object(osgODE, CharacterController) ;
/* ======================================================================= */









/* ======================================================================= */
public:
    void                        setCharacter(Character* character) ;
    inline Character*           getCharacter(void) ;
    inline const Character*     getCharacter(void) const ;
/* ======================================================================= */




/* ======================================================================= */
public:
    inline void         setKeys(const Keys& keys) ;
    inline Keys&        getKeys(void) ;
    inline const Keys&  getKeys(void) const ;

    inline void         setSensitivity(float f) ;
    inline float        getSensitivity(void) const ;
/* ======================================================================= */




/* ======================================================================= */
public:
    virtual bool    handle( const osgGA::GUIEventAdapter& ea,
                            osgGA::GUIActionAdapter& aa,
                            osg::Object*,
                            osg::NodeVisitor* ) ;
/* ======================================================================= */




/* ======================================================================= */
private:
    bool    _handleMOVE(const osgGA::GUIEventAdapter& ea, osgGA::GUIActionAdapter& aa) ;
    bool    _handleKEYDOWN(const osgGA::GUIEventAdapter& ea, osgGA::GUIActionAdapter& aa) ;
    bool    _handleKEYUP(const osgGA::GUIEventAdapter& ea, osgGA::GUIActionAdapter& aa) ;
    bool    _handlePUSH(const osgGA::GUIEventAdapter& ea, osgGA::GUIActionAdapter& aa) ;
    bool    _handleRELEASE(const osgGA::GUIEventAdapter& ea, osgGA::GUIActionAdapter& aa) ;

    void    _moveCharacter(void) ;
/* ======================================================================= */




/* ======================================================================= */
private:
    Keys        m_keys ;
    float       m_sensitivity ;

    osg::ref_ptr<Character>  m_character ;
/* ======================================================================= */




/* ======================================================================= */
private:
    bool    m_warp_pointer ;


    enum {
        NO_MOTION = 0,
        MOVE_FRONT = 1,
        MOVE_BACK = 2,
        MOVE_LEFT = 4,
        MOVE_RIGHT = 8
    } ;

    unsigned int    m_motion ;
/* ======================================================================= */
} ;
/* ....................................................................... */
/* ======================================================================= */




} // namespace osgODE




#include "CharacterController.inl"




#endif /* _OSGODE_CHARACTERCONTROLLER_HPP */
