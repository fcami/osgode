/*!
 * @file Action
 * @author Rocco Martino
 */
/***************************************************************************
 *   Copyright (C) 2013 by Rocco Martino                                   *
 *   martinorocco@gmail.com                                                *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Lesser General Public License as        *
 *   published by the Free Software Foundation; either version 2.1 of the  *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU Lesser General Public License for more details.                   *
 *                                                                         *
 *   You should have received a copy of the GNU Lesser General Public      *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/



#include <osgODE/Character>
#include <osgODE/Sphere>

#include <osgODEUtil/AnimationHelper>

#include <osgDB/ReadFile>
#include <osgDB/WriteFile>




namespace osgODE {



    class Character ;



    class OSG_EXPORT Action: public osg::Referenced
    {

    public:

        virtual Character*  operator()( Character* character ) = 0 ;




        void    setNext( Action* next ) { m_next = next ; }

        Action* getNext(void) { return m_next.get() ; }




        void    add( Action* action )
        {
            if( m_next.valid() )

                m_next->add( action ) ;

            else

                m_next = action ;
        }


    private:
        osg::ref_ptr<Action>    m_next ;
    } ;









    class OSG_EXPORT NullAction: public Action
    {

    public:

        virtual Character*  operator()( Character* character )
        {
            return character ;
        }
    } ;









    class OSG_EXPORT CreateAction: public Action
    {

    public:

        virtual Character*  operator()( Character* character )
        {
			(void) character ;
            return new osgODE::Character() ;
        }
    } ;









    class OSG_EXPORT InitAction: public Action
    {

    public:

        virtual Character*  operator()( Character* character )
        {

            character->setBody( new Sphere() ) ;

            CollisionParameters*    cp = new CollisionParameters() ;
            cp->setMode( dContactApprox1 | dContactFDir1 ) ;

            cp->setMu( 0.0 ) ;


            character->getBody()->asCollidable()->setSize( osg::Vec3(0.5, 0.5, 0.5) ) ;
            character->getBody()->asCollidable()->setCollisionParameters( cp ) ;
            character->getBody()->setMass( 75, osg::Vec3(1,1,1), dSphereClass ) ;

            return character ;
        }
    } ;









    class OSG_EXPORT WriteAction: public Action
    {

    public:

        WriteAction(const std::string& file_name = "character.osgb"):
            m_file_name ( file_name ) {}


        virtual Character*  operator()( Character* character )
        {
            osgDB::writeObjectFile( *character, m_file_name ) ;
            return character ;
        }


    private:
        std::string m_file_name ;
    } ;









    class OSG_EXPORT OpenAction: public Action
    {

    public:

        OpenAction(const std::string& file_name = "character.osgb"):
            m_file_name ( file_name ) {}


        virtual Character*  operator()( Character* character )
        {
			(void) character ;
            return dynamic_cast<Character*>( osgDB::readObjectFile(m_file_name) ) ;
        }


    private:
        std::string m_file_name ;
    } ;









    class OSG_EXPORT SetFirstPersonAction: public Action
    {

    public:

        SetFirstPersonAction(const std::string& file_name = "first_person.osgb"):
            m_file_name ( file_name ) {}


        virtual Character*  operator()( Character* character )
        {
            osg::Node*  fp = osgDB::readNodeFile(m_file_name) ;

            RigidBody*  body = new RigidBody() ;

            body->setGravityMode(false) ;

            body->getMatrixTransform()->addChild( fp ) ;
            body->addUpdateCallback( new osgODEUtil::AnimationHelper() ) ;

            body->setMatrix( character->getBody()->getMatrix() ) ;

            character->attach( body, true, 0.5, 1.0e-3 ) ;

            character->addObject( body ) ;


//             fp->setNodeMask( pViewer::NodeMasks::ALWAYS_ON_TOP_AMN/* | pViewer::NodeMasks::SHADOW_CAST*/ ) ;

            return character ;
        }


    private:
        std::string m_file_name ;
    } ;








}





