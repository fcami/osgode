/*!
 * @file HashTable
 * @author Rocco Martino
 */
/***************************************************************************
 *   Copyright (C) 2012 - 2013 by Rocco Martino                            *
 *   martinorocco@gmail.com                                                *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Lesser General Public License as        *
 *   published by the Free Software Foundation; either version 2.1 of the  *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU Lesser General Public License for more details.                   *
 *                                                                         *
 *   You should have received a copy of the GNU Lesser General Public      *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#ifndef _OSGODEUTIL_HASHTABLE_HPP
#define _OSGODEUTIL_HASHTABLE_HPP




/* ======================================================================= */
#include <osg/Object>
#include <osg/observer_ptr>

#include <string>
#include <cmath>
/* ======================================================================= */




namespace osgODEUtil
{




/* ======================================================================= */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
//! This table associates a observer_ptr< Object > and a string
/*!
 *
 */
class OSG_EXPORT HashTable: public osg::Object
{
/* ======================================================================= */
public:
             HashTable(unsigned int table_size = 256) ;
             HashTable(const HashTable& other, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY) ;

protected:
    virtual ~HashTable(void) ;
/* ======================================================================= */









/* ======================================================================= */
public:
    META_Object(osgODEUtil, HashTable) ;
/* ======================================================================= */









/* ======================================================================= */
public:
    class OSG_EXPORT Pair: public osg::Object
    {
    public:
        Pair(void):
            m_key(""),
            m_value(NULL),
            m_next(NULL) {}

        Pair(const std::string& key, osg::Object* value):
            m_key(key),
            m_value(value),
            m_next(NULL) {}

        Pair(const Pair& other, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY):
            osg::Object(other, copyop),
            m_key(other.m_key),
            m_value(other.m_value),
            m_next(other.m_next) {}


            META_Object(osgODEUtil, HashTable::Pair) ;


            void                setKey(const std::string& key) { m_key = key ; }
            std::string&        getKey(void) { return m_key ; }
            const std::string&  getKey(void) const { return m_key ; }

            void                setValue(osg::Object* value) { m_value = value ; }
            osg::Object*        getValue(void) { return m_value.get() ; }
            const osg::Object*  getValue(void) const { return m_value.get() ; }

            void                setNext(Pair* next) { m_next = next ; }
            Pair*               getNext(void) { return m_next.get() ; }
            const Pair*         getNext(void) const { return m_next.get() ; }


    protected:
        virtual ~Pair(void) {}


    private:
        std::string                     m_key ;
        osg::ref_ptr<osg::Object>       m_value ;
        osg::ref_ptr<Pair>              m_next ;
    } ;
/* ======================================================================= */









/* ======================================================================= */
public:
    //! Set the pair
    void                set(const std::string& key, osg::Object* value) ;

    //! Set the pair
    void                set(Pair* pair ) ;


    //! Eliminate the pair
    void                reset(const std::string& key) ;

    //! Get the value
    osg::Object*        get(const std::string& key) const ;

    //! Get the pair at the index idx
    Pair*               get(unsigned int idx) const ;


    //! Get the value. If the value is Null, free the pair
    inline osg::Object* getOrReset(const std::string& key) ;

    //! Clear
    inline void         clear(void) ;


    //! This operation is destructive
    void                setTableSize(unsigned int size) ;

    //! Get the table size
    inline unsigned int getTableSize(void) const ;


    //! Set the hash constant
    inline void     setConstant(float constant) ;

    //! Get the hash constant
    inline float    getConstant(void) const ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Invoke T::member(osg::Object*) on each element
    template<class T>
    inline void     traverseObjects(T& t, void (T::*member)(osg::Object*)) ;

    //! Invoke fn(osg::Object*) on each element
    inline void     traverseObjects( void (*fn)(osg::Object*) ) ;
/* ======================================================================= */




/* ======================================================================= */
private:
    inline unsigned int _hash(const char* key) const ;
    inline unsigned int _lookup(unsigned int hash) const ;
    inline unsigned int _lookup(const std::string& key) const ;
/* ======================================================================= */




/* ======================================================================= */
private:
    // num_pairs
    unsigned int    m_table_size ;

    osg::ref_ptr<Pair> *    m_pairs ;

    float           m_constant ;

    unsigned int    m_right_shift ;

    unsigned int    m_hash_fdf ;
/* ======================================================================= */
} ;
/* ....................................................................... */
/* ======================================================================= */




#include "HashTable.inl"




} // namespace osgODEUtil




#endif /* _OSGODEUTIL_HASHTABLE_HPP */
