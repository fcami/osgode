/*!
 * @file CharacterBase
 * @author Rocco Martino
 */
/***************************************************************************
 *   Copyright (C) 2013 by Rocco Martino                                   *
 *   martinorocco@gmail.com                                                *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Lesser General Public License as        *
 *   published by the Free Software Foundation; either version 2.1 of the  *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU Lesser General Public License for more details.                   *
 *                                                                         *
 *   You should have received a copy of the GNU Lesser General Public      *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#ifndef _OSGODE_CHARACTERBASE_HPP
#define _OSGODE_CHARACTERBASE_HPP




/* ======================================================================= */
#include <osgODE/Container>
/* ======================================================================= */




namespace osgODE
{




/* ======================================================================= */
class AMotorJoint ;
class LMotorJoint ;
class NearestNotMeRayCastResult ;
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
//! A standing up, running and jumping character
/*!
 *
 */
class OSG_EXPORT CharacterBase: public Container
{
/* ======================================================================= */
public:
             CharacterBase(void) ;
             CharacterBase(const CharacterBase& other, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY) ;

protected:
    virtual ~CharacterBase(void) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    META_Object(osgODE, CharacterBase) ;
/* ======================================================================= */









/* ======================================================================= */
public:
    //! Create (if needed) and setup body and motors
    void    init(void) ;


    //! Destroy body and motors
    virtual void    clear(void) ;
/* ======================================================================= */









/* ======================================================================= */
public:
    //! Set the body
    void                        setBody(RigidBody* body) ;

    //! Get the body
    inline RigidBody*           getBody(void) ;

    //! Get the const body
    inline const RigidBody*     getBody(void) const ;



    //! Set the joint that constrains body orientation
    void                        setAngularMotor(AMotorJoint* joint) ;

    //! Get the joint that constrains body orientation
    inline AMotorJoint*         getAngularMotor(void) ;

    //! Get the const joint that constrains body orientation
    inline const AMotorJoint*   getAngularMotor(void) const ;



    //! Set the joint that translates the body
    void                        setLinearMotor(LMotorJoint* joint) ;

    //! Get the joint that translates the body
    inline LMotorJoint*         getLinearMotor(void) ;

    //! Get the const joint that translates the body
    inline const LMotorJoint*   getLinearMotor(void) const ;
/* ======================================================================= */









/* ======================================================================= */
public:
    //! Set the "up" vector in world frame. Default: +Z
    inline void                 setUpVersor(const osg::Vec3& up) ;

    //! Get the "up" vector in world frame. Default: +Z
    inline const osg::Vec3&     getUpVersor(void) const ;


    //! The right hand side of the character in local frame. Default: +X
    inline void                 setSideVersor(const osg::Vec3& rhs) ;

    //! The right hand side of the character in local frame. Default: +X
    inline const osg::Vec3&     getSideVersor(void) const ;


    //! The front of the character in local frame. Default: -Z
    inline void                 setFrontVersor(const osg::Vec3& front) ;

    //! The front of the character in local frame. Default: -Z
    inline const osg::Vec3&     getFrontVersor(void) const ;



    //! Set the height. Default: 1.75
    inline void     setHeight(double height) ;

    //! Get the height. Default: 1.75
    inline double   getHeight(void) const ;



    //! Set the rotation around the up versor
    inline void     setYaw(double yaw) ;

    //! Get the rotation around the up versor
    inline double   getYaw(void) const ;

    //! Set the rotation around the side versor. Default: 1/2 pi
    inline void     setPitch(double pitch) ;

    //! Get the rotation around the side versor. Default: 1/2 pi
    inline double   getPitch(void) const ;



    //! Get the current rotation around the up versor
    inline double   getCurrentYaw(void) const ;

    //! Get the current rotation around the side versor. Default: 1/2 pi
    inline double   getCurrentPitch(void) const ;


    //! Set the elasticity for yaw/pitch update (default: 5)
    inline void         setElasticity(unsigned int elasticity) ;

    //! Get the elasticity for yaw/pitch update (default: 5)
    inline unsigned int getElasticity(void) const ;
/* ======================================================================= */









/* ======================================================================= */
public:
    struct FootContactInfo
    {
        double  Spring ;
        double  Damper ;
    } ;


    //! Set the foot contact info. Default: { Spring = 1.0e4, Damper = 1.0e3 }
    inline void     setFootContactInfo( const FootContactInfo& info ) ;

    //! Get the const foot contact info. Default: { Spring = 1.0e4, Damper = 1.0e3 }
    inline const FootContactInfo&  getFootContactInfo(void) const ;
/* ======================================================================= */









/* ======================================================================= */
public:
    //! Parameters to simulate the footstep visual effect
    /*!
     * The CharacterBase applies a sinusoidal down force 'F' to the body
     * along the up vector. According to the spring and damper nature of the
     * foot contacts, this produces an oscillation.\n
     * The magnitude of the force is defined as:
     *
     * @image html footstep_1.gif
     * \n
     * @image html footstep_2.gif
     * \n
     * @image html footstep_3.gif
     * \n
     * @image html footstep_4.gif
     * \n
     * Where:
     * - body_speed is the length of the body velocity vector
     * - dt is the current step size
     * - H(x) is the unit step function
     */
    /*
     * For inline reading:
     *
     *
     *  M = Magnitude * body_speed
     *
     *  P = PowerFactor * body_speed
     *
     *  T += dt * TimeMultiplier * body_speed
     *
     *  F = M * ( body_speed >= SpeedThreshold ) *
     *      pow( 0.5 + 0.5 * sin( 2 * pi * T ), P )
     */
    struct FootstepInfo
    {
        double  Magnitude ;
        double  PowerFactor ;
        double  TimeMultiplier ;
        double  SpeedThreshold ;
    } ;

    //! Set the footstep info. Default: { Mag=250, Pow=0.25, Mul=0.5, Thres = 0.1 }
    inline void     setFootstepInfo( const FootstepInfo& info ) ;

    //! Get the const footstep info. Default: { Mag=250, Pow=0.25, Mul=0.5, Thres = 0.1 }
    inline const FootstepInfo&  getFootstepInfo(void) const ;
/* ======================================================================= */









/* ======================================================================= */
public:
    //! Set the linear velocity of the character
    /*!
     * @param   velocity    During computation, the velocity is projected
     *                      onto the plane orthogonal to the foot contact
     *                      normal. The resulting vector is then rescaled to
     *                      preserve the original length.
     *
     * @param   fmax        The maximum force that can be used to push the
     *                      humanoid
     */
    inline void     setMotion(const osg::Vec3& velocity, double fmax) ;


    //! Add a force to the body in world frame
    /*!
     * @param   force       The force in world frame
     *
     * @param   res_time    Any other call to this function will have no
     *                      effect for res_time seconds, starting at next
     *                      world step.
     */
    inline void     setJump(const osg::Vec3& force, double res_time = 0.0) ;
/* ======================================================================= */









/* ======================================================================= */
public:
    //! Returns true if the character touches the ground
    inline bool     isOnGround(void) const ;


    //! Get the first derivative of the footstep sinusoidal function
    inline double   getFootstepDerivative(void) const ;
/* ======================================================================= */









/* ======================================================================= */
public:
    virtual void    update(double step_size) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    virtual CharacterBase*  asCharacterBase(void) ;
/* ======================================================================= */




/* ======================================================================= */
private:
    void    _updateOrientation(double step_size) ;
    void    _collideAgainstGround(double step_size) ;
    void    _move(double step_size) ;
    void    _jump(double step_size) ;
/* ======================================================================= */




/* ======================================================================= */
private:
    osg::ref_ptr<RigidBody>     m_body ;

    osg::ref_ptr<AMotorJoint>   m_amotor ;
    osg::ref_ptr<LMotorJoint>   m_lmotor ;

    osg::ref_ptr<NearestNotMeRayCastResult> m_foot_ray_cast_result ;


    osg::Vec3   m_up_versor ;
    osg::Vec3   m_side_versor ;
    osg::Vec3   m_front_versor ;

    double      m_yaw ;
    double      m_pitch ;

    double      m_current_yaw ;
    double      m_current_pitch ;

    double      m_avg_side_velocity ;

    double      m_footstep_time ;

    double      m_height ;


    unsigned int    m_elasticity ;

    osg::Vec3       m_motion_velocity ;
    double          m_motion_fmax ;

    osg::Vec3       m_jump_force ;
    double          m_jump_res_time ;



    dJointID    m_foot_contact_joint ;

    bool        m_is_on_ground ;

    osg::Vec3   m_ground_contact_normal ;



    FootContactInfo m_foot_contact_info ;
    FootstepInfo    m_footstep_info ;

    double          m_footstep_derivative ;
/* ======================================================================= */
} ;
/* ....................................................................... */
/* ======================================================================= */




} // namespace osgODE




#include "CharacterBase.inl"




#endif /* _OSGODE_CHARACTERBASE_HPP */
