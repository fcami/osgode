/*!
 * @file ShockWave
 * @author Rocco Martino
 */
/***************************************************************************
 *   Copyright (C) 2013 by Rocco Martino                                   *
 *   martinorocco@gmail.com                                                *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Lesser General Public License as        *
 *   published by the Free Software Foundation; either version 2.1 of the  *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#ifndef _OSGODE_SHOCKWAVE_HPP
#define _OSGODE_SHOCKWAVE_HPP




/* ======================================================================= */
#include <osgODE/Sphere>
/* ======================================================================= */




namespace osgODE
{




/* ======================================================================= */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
//! A shock wave
/*!
 * This is an expanding capped cone that applies a force on each collidable
 * within a given range.\n
 * The instance is removed from the space when its maximum impulse is below
 * the given threshold
 */
class OSG_EXPORT ShockWave: public Sphere
{
/* ======================================================================= */
public:
             ShockWave(void) ;
             ShockWave(const ShockWave& other, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY) ;

protected:
    virtual ~ShockWave(void) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    META_Object(osgODE, ShockWave) ;
/* ======================================================================= */









/* ======================================================================= */
public:
    //! Set the direction. Default osg::Z_AXIS * -1
    inline void             setDirection( const osg::Vec3& direction ) ;

    //! Get the direction. Default osg::Z_AXIS * -1
    inline osg::Vec3&       getDirection(void) ;

    //! Get the const direction. Default osg::Z_AXIS
    inline const osg::Vec3& getDirection(void) const ;


    //! Set the angle in radians. Default pi. It's clamped to [0,pi]
    inline void     setAngle( double angle ) ;

    //! Get the const angle in radians. Default pi.
    inline double   getAngle(void) const ;


    //! Set the speed. Default 100 m/s. It's clamped to [0,inf]
    inline void     setSpeed( double angle ) ;

    //! Get the const speed. Default 100 m/s
    inline double   getSpeed(void) const ;


    //! Set the impulse. Default 100 Ns. It's clamped to [0,inf]
    inline void     setImpulse( double impulse ) ;

    //! Get the const impulse. Default 100 Ns
    inline double   getImpulse(void) const ;


    //! Set the linear attenuation. Default 1. It's clamped to [0,inf]
    inline void     setLinearAttenuation( double linear_attenuation ) ;

    //! Get the const linear attenuation. Default 1
    inline double   getLinearAttenuation(void) const ;


    //! Set the quadratic attenuation. Default 0. It's clamped to [0,inf]
    inline void     setQuadraticAttenuation( double quadratic_attenuation ) ;

    //! Get the const quadratic attenuation. Default 0
    inline double   getQuadraticAttenuation(void) const ;


    //! Set the threshold. Default 10 N. It's clamped to [0,inf]
    inline void     setThreshold( double threshold ) ;

    //! Get the const threshold. Default 10 N
    inline double   getThreshold(void) const ;


    //! Set the wave size. Default 5m. It's clamped to [0,inf]
    inline void     setWaveSize( double wave_size ) ;

    //! Get the const wave size. Default 5m. It's clamped to [0,inf]
    inline double   getWaveSize(void) const ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Get the current force
    inline double   getCurrentForce(void) const ;

    //! Get the current radius
    inline double   getCurrentRadius(void) const ;


    //! Add the ShockWaveCollisionCallbacl
    void    setupCallbacks(void) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Compute the impulse and update the radius
    virtual void        postUpdate(double step_size) ;

    //! Quick dynamic_cast
    virtual ShockWave*  asShockWave(void) ;
/* ======================================================================= */




/* ======================================================================= */
private:
    osg::Vec3   m_direction ;
    double      m_angle ;
    double      m_speed ;
    double      m_impulse ;
    double      m_linear_attenuation ;
    double      m_quadratic_attenuation ;
    double      m_threshold ;
    double      m_wave_size ;


    double      m_current_radius ;
    double      m_current_force ;
/* ======================================================================= */
} ;
/* ....................................................................... */
/* ======================================================================= */




} // namespace osgODE




#include "ShockWave.inl"




#endif /* _OSGODE_SHOCKWAVE_HPP */
