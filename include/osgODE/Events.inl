/*!
 * @file Events.inl
 * @author Rocco Martino
 */
/***************************************************************************
 *   Copyright (C) 2014 by Rocco Martino                                   *
 *   martinorocco@gmail.com                                                *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Lesser General Public License as        *
 *   published by the Free Software Foundation; either version 2.1 of the  *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU Lesser General Public      *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#ifndef _OSGODE_EVENTS_INL
#define _OSGODE_EVENTS_INL




/* ======================================================================= */
/* ....................................................................... */
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::Events::setCursorPosition( const osg::Vec2& cursor_position )
{
    m_cursor_position = cursor_position ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline osg::Vec2&
osgODE::Events::getCursorPosition(void)
{
    return m_cursor_position ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline const osg::Vec2&
osgODE::Events::getCursorPosition(void) const
{
    return m_cursor_position ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::Events::setNormalizedCursorPosition( const osg::Vec2& normalized_cursor_position )
{
    m_normalized_cursor_position = normalized_cursor_position ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline osg::Vec2&
osgODE::Events::getNormalizedCursorPosition(void)
{
    return m_normalized_cursor_position ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline const osg::Vec2&
osgODE::Events::getNormalizedCursorPosition(void) const
{
    return m_normalized_cursor_position ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::Events::setButtonMask( unsigned int button_mask )
{
    m_button_mask = button_mask ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline unsigned int
osgODE::Events::getButtonMask(void) const
{
    return m_button_mask ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::Events::setView( osg::View* view )
{
    m_view = view ;
    m_dirty_view_projection = true ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline osg::View*
osgODE::Events::getView(void)
{
    return m_view.get() ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline const osg::View*
osgODE::Events::getView(void) const
{
    return m_view.get() ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline const osg::Matrix&
osgODE::Events::getInverseViewProjectionMatrix(void)
{
    if( m_dirty_view_projection && m_view.valid() ) {
        const osg::Matrix&  view = m_view->getCamera()->getViewMatrix() ;
        const osg::Matrix&  projection = m_view->getCamera()->getProjectionMatrix() ;

        m_inverse_view_projection = osg::Matrix::inverse( view * projection ) ;

        m_dirty_view_projection = false ;
    }

    return m_inverse_view_projection ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline unsigned int
osgODE::Events::getFrameCounterInternal(void) const
{
    return m_frame_counter ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::Events::incFrameCounterInternal(void)
{
    ++m_frame_counter ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline bool
osgODE::Events::isKeyPressed(unsigned int keysym) const
{
    return m_key_pressed[keysym] ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::Events::setKeyPressed(unsigned int keysym, bool pressed)
{
    m_key_pressed[keysym] = pressed ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::Events::requestViewMatrix(const Events::ViewMatrix& vm)
{
    if( vm.getPriority() > m_view_matrix.getPriority() ) {
        m_view_matrix.set( vm ) ;
    }
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline const osgODE::Events::ViewMatrix&
osgODE::Events::getViewMatrix(void) const
{
    return m_view_matrix ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline osgODE::Events::ViewMatrix&
osgODE::Events::getViewMatrix(void)
{
    return m_view_matrix ;
}
/* ....................................................................... */
/* ======================================================================= */




#endif /* _OSGODE_EVENTS_INL */
