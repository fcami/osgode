/*!
 * @file Container
 * @author Rocco Martino
 */
/***************************************************************************
 *   Copyright (C) 2012 - 2015 by Rocco Martino                            *
 *   martinorocco@gmail.com                                                *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Lesser General Public License as        *
 *   published by the Free Software Foundation; either version 2.1 of the  *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU Lesser General Public License for more details.                   *
 *                                                                         *
 *   You should have received a copy of the GNU Lesser General Public      *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#ifndef _OSGODE_CONTAINER_HPP
#define _OSGODE_CONTAINER_HPP




/* ======================================================================= */
#include <osgODE/ODEObject>
/* ======================================================================= */




namespace osgODE
{




/* ======================================================================= */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
//! This class contains a list of objects
/*!
 *
 */
class OSG_EXPORT Container: public ODEObject
{
/* ======================================================================= */
public:
             Container(void) ;
             Container(const Container& other, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY) ;

protected:
    virtual ~Container(void) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    META_Object(osgODE, Container) ;

    //! divert the visitors to the objects in the list
    virtual void    accept(osg::NodeVisitor& nv) ;
/* ======================================================================= */









/* ======================================================================= */
public:
    //! Set the matrix
    inline void setMatrix( const osg::Matrix& matrix ) ;

    //! Get the matrix
    inline osg::Matrix& getMatrix(void) ;

    //! Get the const matrix
    inline const osg::Matrix& getMatrix(void) const ;


    //! Transform each body by t in getMatrix() reference frame
    void    transform( const osg::Matrix& t ) ;
/* ======================================================================= */









/* ======================================================================= */
public:
    //! Put the object in the list
    void    addObject(ODEObject* obj) ;



    //
    // It's ambiguous with removeObject(0)
    //
//     //! Remove the object from the list
//     inline bool     removeObject(ODEObject* obj, bool preserve_order=false) ;


    //! Remove the object from the list
    bool            removeObject(unsigned int idx, bool preserve_order=false) ;


    //! Remove all objects
    virtual void    clear(void) ;


    ODEObject*          getObject(unsigned int idx) ;
    const ODEObject*    getObject(unsigned int idx) const ;


#define ODEOBJECT_NOT_FOUND ((unsigned int)-1)

    //! If the object is not in the list, this returns ODEOBJECT_NOT_FOUND
    unsigned int    getObjectIDX(ODEObject* obj) const ;



    //! Returns true if the object is in the list
    inline bool     hasObject(ODEObject* obj) const ;

    //! Liner search
    ODEObject*      getObjectByName(const std::string& name) ;




    typedef std::vector< osg::ref_ptr<ODEObject> >  ObjectList ;

    //! Set the object list
    inline void     setObjectList(const ObjectList& object_list) ;

    //! Get the object list
    inline ObjectList&    getObjectList(void) ;

    //! Get the const object list
    inline const ObjectList&    getObjectList(void) const ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Translate all bodies by the given amount of units
    /*!
     * It's a bad idea to use this function if the container is not inside
     * a World
     */
    void    translate( const osg::Vec3& distance ) OSGODE_DEPRECATED ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Invoke T::member(ODEObject*) on each object
    template<class T>
    inline void    traverseObjects(T& t, void (T::*member)(ODEObject*)) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    virtual Container*          asContainer(void) ;


    //! Transmit the update to the objects in the list
    virtual void                update(ooReal step_size) ;

    //! Transmit the update to the objects in the list
    virtual void                postUpdate(ooReal step_size) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Insert this instance and all the objects into the world
    virtual bool    addToWorldInternal(World* world) ;

    //! Remove this instance and all the objects from the world
    virtual bool    removeFromWorldInternal(World* world) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    virtual const osg::BoundingSphere&  getBound(void) const ;
/* ======================================================================= */




/* ======================================================================= */
public:
    virtual void    callUpdateCallbackInternal(void) ;
    virtual void    callPostUpdateCallbackInternal(void) ;
    virtual void    updateTransformInternal(void) ;
/* ======================================================================= */




/* ======================================================================= */
private:
    ObjectList  m_object_list ;


    osg::BoundingSphere         m_bounding_sphere ;


    osg::Matrix     m_matrix ;
/* ======================================================================= */
} ;
/* ....................................................................... */
/* ======================================================================= */




} // namespace osgODE




#include "Container.inl"




#endif /* _OSGODE_CONTAINER_HPP */
