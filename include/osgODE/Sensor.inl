/*!
 * @file Sensor.inl
 * @author Rocco Martino
 */
/***************************************************************************
 *   Copyright (C) 2013 by Rocco Martino                                   *
 *   martinorocco@gmail.com                                                *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Lesser General Public License as        *
 *   published by the Free Software Foundation; either version 2.1 of the  *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU Lesser General Public License for more details.                   *
 *                                                                         *
 *   You should have received a copy of the GNU Lesser General Public      *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#ifndef _OSGODE_SENSOR_INL
#define _OSGODE_SENSOR_INL

/* ======================================================================= */
/* ....................................................................... */
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::Sensor::setPosition( const osg::Vec3& position )
{
    m_position = position ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::Sensor::setQuaternion( const osg::Quat& quaternion )
{
    m_quaternion = quaternion ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::Sensor::setRadius(double radius)
{
    m_radius = radius ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline const osg::Vec3&
osgODE::Sensor::getPosition(void) const
{
    return m_position ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline const osg::Quat&
osgODE::Sensor::getQuaternion(void) const
{
    return m_quaternion ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline double
osgODE::Sensor::getRadius(void) const
{
    return m_radius ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::Sensor::setActivationCallback(osgODE::ODECallback* cbk)
{
    m_callback = cbk ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline osgODE::ODECallback*
osgODE::Sensor::getActivationCallback(void)
{
    return m_callback.get() ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline const osgODE::ODECallback*
osgODE::Sensor::getActivationCallback(void) const
{
    return m_callback.get() ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::Sensor::addActivationCallback(osgODE::ODECallback* cbk)
{
    if( m_callback.valid() ) {
        m_callback->addNestedCallback(cbk) ;
    } else {
        setActivationCallback(cbk) ;
    }
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::Sensor::removeActivationCallback(osgODE::ODECallback* cbk)
{
    if(cbk) {
        if( cbk == m_callback.get()) {
            m_callback = m_callback->getNestedCallback() ;
        } else {
            if( m_callback.valid() ) {
                m_callback->removeNestedCallback(cbk) ;
            }
        }
    }
}
/* ....................................................................... */
/* ======================================================================= */




#endif /* _OSGODE_SENSOR_INL */
