/*!
 * @file Manager
 * @author Rocco Martino
 */
/***************************************************************************
 *   Copyright (C) 2010 - 2013 by Rocco Martino                            *
 *   martinorocco@gmail.com                                                *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Lesser General Public License as        *
 *   published by the Free Software Foundation; either version 2.1 of the  *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU Lesser General Public License for more details.                   *
 *                                                                         *
 *   You should have received a copy of the GNU Lesser General Public      *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#ifndef _OSGODE_MANAGER_HPP
#define _OSGODE_MANAGER_HPP




/* ======================================================================= */
#include <osgODE/World>

#include <osg/Node>
#include <osg/NodeVisitor>
/* ======================================================================= */




namespace osgODE
{




/* ======================================================================= */
/* ....................................................................... */
//! This class synchronizes a World
/*!
 * The better way to use this is to call the "frame" method during the update
 * traversal. The ManagerUpdateCallback does this job.\n
 */
class OSG_EXPORT Manager: public osg::Node
{
/* ======================================================================= */
public:
             Manager(void) ;
             Manager(const Manager& other, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY) ;

protected:
    virtual ~Manager(void) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    META_Node(osgODE, Manager) ;


    //! Compute the BoundingSphere
    /*!
     * World::readLock
     */
    virtual osg::BoundingSphere computeBound(void) const ;


    //! Divert the visitor to the world
    virtual void traverse(osg::NodeVisitor& nv) ;


    //! Sould I transmit the visitors to the world? (default: false)
    /*!
     * Introduce an assert( m_world.valid() ) in the traverse method.
     * (or SIGSEGV if asserts are disabled)
     */
    inline void     setAcceptVisitors(bool flag) ;

    //! Do I transmit the visitors to the world? (default: false)
    inline bool     getAcceptVisitors(void) const ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Set the step size (default: 1/60)
    inline void     setStepSize(double step_size) ;

    //! Get the step size (default: 1/60)
    inline double   getStepSize(void) const ;


    //! Set the time multiplier (default: 1.0)
    inline void     setTimeMultiplier(double multiplier) ;

    //! Get the time multiplier (default: 1.0)
    inline double   getTimeMultiplier(void) const ;


    //! Set the world
    inline void     setWorld(World* world) ;

    //! Get the world
    inline World*   getWorld(void) ;

    //! Get the const world
    inline const World* getWorld(void) const ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Quick init. Set the ManagerUpdateCallback as update callback
    /*!
     * @param   accept_visitors     invoke setAcceptVisitors(accept_visitors)
     * @param   step_size           invoke setStepSize( step_size )
     *
     * Must be called once before everything else
     */
    void    setup(bool accept_visitors=true, double step_size=1.0/60.0) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Advance
    /*!
     * If step_size <= 0.0 returns immediately
     */
    bool    frame(double step_size) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Increment NumchildrenRequiringUpdateTraversal (default: false)
    inline void     setForceUpdateTraversal(bool flag) ;

    inline bool     getForceUpdateTraversal(void) const ;
/* ======================================================================= */




/* ======================================================================= */
private:
    double              m_delta ;

    double              m_step_size ;
    double              m_time_multiplier ;

    bool                m_accept_visitors ;

    osg::ref_ptr<World> m_world ;

    bool                m_force_update_traversal ;
/* ======================================================================= */
} ;
/* ....................................................................... */
/* ======================================================================= */




} // namespace osgODE




#include "Manager.inl"




#endif /* _OSGODE_MANAGER_HPP */
