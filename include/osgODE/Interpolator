/*!
 * @file Interpolator
 * @author Rocco Martino
 */
/***************************************************************************
 *   Copyright (C) 2013 by Rocco Martino                                   *
 *   martinorocco@gmail.com                                                *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Lesser General Public License as        *
 *   published by the Free Software Foundation; either version 2.1 of the  *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU Lesser General Public License for more details.                   *
 *                                                                         *
 *   You should have received a copy of the GNU Lesser General Public      *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#ifndef _OSGODE_INTERPOLATOR_HPP
#define _OSGODE_INTERPOLATOR_HPP




/* ======================================================================= */
#include <osg/Object>
#include <osg/Vec3>
#include <osg/Quat>

#include <vector>
#include <algorithm>
/* ======================================================================= */




namespace osgODE
{




/* ======================================================================= */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
//! Interpolator base class
/*!
 */
class OSG_EXPORT InterpolatorBase: public osg::Object
{
/* ======================================================================= */
public:
             InterpolatorBase(void):
                m_dirty(false),
                m_looping(false) {}

             InterpolatorBase(const InterpolatorBase& other, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY):
                osg::Object(other, copyop),
                m_dirty( other.m_dirty ),
                m_looping( other.m_looping ) {}

protected:
    virtual ~InterpolatorBase(void) {}
/* ======================================================================= */




/* ======================================================================= */
public:
    META_Object(osgODE, InterpolatorBase) ;
/* ======================================================================= */









/* ======================================================================= */
public:
    void    setLooping(bool looping) {
        m_looping = looping ;
    }

    bool    getLooping(void) const {
        return m_looping ;
    }

    void    setDirty(bool dirty) {
        m_dirty = dirty ;
    }

    bool    getDirty(void) const {
        return m_dirty ;
    }
/* ======================================================================= */




/* ======================================================================= */
private:
    bool        m_dirty ;
    bool        m_looping ;
/* ======================================================================= */
} ;
/* ....................................................................... */
/* ======================================================================= */














/* ======================================================================= */
/* ....................................................................... */
//! Interpolator base class
/*!
 */
template <class T>
class OSG_EXPORT Interpolator: public InterpolatorBase
{
/* ======================================================================= */
public:
             Interpolator(void) {}

             Interpolator(const Interpolator& other, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY):
                InterpolatorBase(other, copyop),
                m_points( other.m_points ) {}

protected:
    virtual ~Interpolator(void) {}
/* ======================================================================= */




/* ======================================================================= */
public:
//     META_Object(osgODE, Interpolator) ;
/* ======================================================================= */









/* ======================================================================= */
public:
    typedef std::pair<double, T>    Point ;
    typedef std::vector<Point>      PointList ;



    void    addPoint(double t, const T& p) {
        m_points.push_back( Point(t, p) ) ;
        setDirty(true) ;
    }

    const PointList&    getPointList(void) const {
        return m_points ;
    }

    void    setPointList(const PointList& points) {
        m_points = points ;
        setDirty(true) ;
    }


    void    clear(void) {
        m_points.clear() ;
        setDirty(true) ;
    }


    double  getDuration(void) {

        if( getDirty() ) {
            init() ;
        }

        if( m_points.size() ) {
            return m_points[m_points.size() - 1].first - m_points[0].first ;
        }

        return 0.0 ;
    }
/* ======================================================================= */




/* ======================================================================= */
public:
    T   interpolate(double x)
    {
        if( getDirty() ) {
            init() ;
        }





        const Point&    first = *(m_points.begin()) ;

        /* x < first point */
        if(x < first.first) {

            return first.second ;


        } else {

            /* x >= last point */

            const Point&    last = *(m_points.end() - 1) ;


            if (x >= last.first  && m_points.size() > 1) {

                if( getLooping() ) {

                    double  delta = last.first - first.first ;

                    do {
                        x -= delta ;
                    } while(x >= last.first) ;


                } else {
                    return last.second ;
                }
            }
        }



        T   result ;
        interpolateImplementation(x, result) ;

        return result ;
    }
/* ======================================================================= */




/* ======================================================================= */
protected:
    virtual void    init(void)
    {
        sortPoints() ;
        setDirty(false) ;
    }



    struct PointCompClass {
        // http://msdn.microsoft.com/library/tsx7wabs%28v=vs.100%29.aspx
        bool    operator()(const typename Interpolator::Point& a, const typename Interpolator::Point& b) {
            return (a.first < b.first ) ;
        }
    } m_point_comp_instance ;


    //! std::sort
    void        sortPoints(void)
    {
        std::sort(m_points.begin(), m_points.end(), m_point_comp_instance) ;
    }



    //! interpolation
    virtual void    interpolateImplementation(double t, T& result) = 0 ;
/* ======================================================================= */




/* ======================================================================= */
protected:
    //! Return the index of the point before t (or t if it matches)
    unsigned int    findX0(double x)
    {
        if( getDirty() ) {
            init() ;
        }


        unsigned int    index_l = 0 ;
        unsigned int    index_g = m_points.size() - 1 ;
        unsigned int    index ;

        /* binary search */
        while( (index_g - index_l) > 1 )
        {
            index = (index_g + index_l) / 2 ;

            if (m_points[index].first > x) {
                index_g = index ;
            } else {
                index_l = index ;
            }
        }

        return index_l ;
    }
/* ======================================================================= */




/* ======================================================================= */
protected:
    PointList   m_points ;
/* ======================================================================= */
} ;
/* ....................................................................... */
/* ======================================================================= */














/* ======================================================================= */
/* ....................................................................... */
//! ScalarInterpolator base class
/*!
 */
class OSG_EXPORT ScalarInterpolator: public Interpolator<double>
{
/* ======================================================================= */
public:
             ScalarInterpolator(void) {}
             ScalarInterpolator(const ScalarInterpolator& other, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY):
                Interpolator(other, copyop) {}

protected:
    virtual ~ScalarInterpolator(void) {}
/* ======================================================================= */
} ;
/* ....................................................................... */
/* ======================================================================= */














/* ======================================================================= */
/* ....................................................................... */
//! Vec3Interpolator base class
/*!
 */
class OSG_EXPORT Vec3Interpolator: public Interpolator<osg::Vec3>
{
/* ======================================================================= */
public:
             Vec3Interpolator(void) {}
             Vec3Interpolator(const Vec3Interpolator& other, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY):
                Interpolator(other, copyop) {}

protected:
    virtual ~Vec3Interpolator(void) {}
/* ======================================================================= */
} ;
/* ....................................................................... */
/* ======================================================================= */














/* ======================================================================= */
/* ....................................................................... */
//! QuatInterpolator base class
/*!
 */
class OSG_EXPORT QuatInterpolator: public Interpolator<osg::Quat>
{
/* ======================================================================= */
public:
             QuatInterpolator(void) {}
             QuatInterpolator(const QuatInterpolator& other, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY):
                Interpolator(other, copyop) {}

protected:
    virtual ~QuatInterpolator(void) {}
/* ======================================================================= */
} ;
/* ....................................................................... */
/* ======================================================================= */




} // namespace osgODE




// #include "Interpolator.inl"




#endif /* _OSGODE_INTERPOLATOR_HPP */
