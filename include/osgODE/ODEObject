/*!
 * @file ODEObject
 * @author Rocco Martino
 */
/***************************************************************************
 *   Copyright (C) 2010 - 2012 by Rocco Martino                            *
 *   martinorocco@gmail.com                                                *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Lesser General Public License as        *
 *   published by the Free Software Foundation; either version 2.1 of the  *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU Lesser General Public License for more details.                   *
 *                                                                         *
 *   You should have received a copy of the GNU Lesser General Public      *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#ifndef _OSGODE_ODEOBJECT_HPP
#define _OSGODE_ODEOBJECT_HPP




/* ======================================================================= */
#include <osg/Object>
#include <osg/NodeVisitor>
#include <osg/observer_ptr>

#include <osgODE/ODE>
#include <osgODE/ODECallback>
/* ======================================================================= */




namespace osgODE
{




/* ======================================================================= */
class   Collidable ;
class   Joint ;
class   ODEObjectContainer ;
class   RigidBody ;
class   TargetJoint ;
class   Transformable ;
class   Space ;
class   World ;
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
//! osgODE object base class
/*!
 * The necessary steps to "activate" the object must be known by the object
 * itself and executed in the virtual method addToWorldInternal. This method
 * returns a boolean value that indicates whether the object has been succeful
 * activated or not.\n
 * If the addToWorldInternal returns TRUE, the world invokes the method
 * ODEObject::setWorldInternal passing itself as parameter and the object is
 * inserted in a list, otherwise ODEObject::setWorldInternal(NULL) is
 * called and the object is discarded
 */
class OSG_EXPORT ODEObject: public osg::Object
{
/* ======================================================================= */
public:
             ODEObject(void) ;
             ODEObject(const ODEObject& other, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY) ;

protected:
    virtual ~ODEObject(void) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    META_Object(osgODE, ODEObject) ;

    //! does nothing
    virtual void    accept(osg::NodeVisitor& nv) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Quick dynamic cast
    virtual Collidable*             asCollidable(void) ;

    //! Quick dynamic cast
    virtual Joint*                  asJoint(void) ;

    //! Quick dynamic cast
    virtual ODEObjectContainer*     asODEObjectContainer(void) ;

    //! Quick dynamic cast
    virtual RigidBody*              asRigidBody(void) ;

    //! Quick dynamic cast
    virtual TargetJoint*            asTargetJoint(void) ;

    //! Quick dynamic cast
    virtual Transformable*          asTransformable(void) ;

    //! Quick dynamic cast
    virtual World*                  asWorld(void) ;

    //! Quick dynamic cast
    virtual Space*                  asSpace(void) ;


    //! Called by the world before the World::step
    virtual void                update(double step_size) ;


    //! Called by the world after the World::step
    virtual void                postUpdate(double step_size) ;



    //! Set the callback list
    inline void     setUpdateCallback(ODECallback* cbk) ;

    //! Add the callback
    inline void     addUpdateCallback(ODECallback* cbk) ;

    //! Remove the callback
    inline void     removeUpdateCallback(ODECallback* cbk) ;

    //! Get the callback list
    inline ODECallback* getUpdateCallback(void) ;

    //! Get the const callback list
    inline const ODECallback*   getUpdateCallback(void) const ;



    //! Set the callback list
    inline void     setPostUpdateCallback(ODECallback* cbk) ;

    //! Add the callback
    inline void     addPostUpdateCallback(ODECallback* cbk) ;

    //! Remove the callback
    inline void     removePostUpdateCallback(ODECallback* cbk) ;

    //! Get the callback list
    inline ODECallback* getPostUpdateCallback(void) ;

    //! Get the const callback list
    inline const ODECallback*   getPostUpdateCallback(void) const ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Add the object to the world
    /*!
     * Internally invoked by World::addObject
     */
    virtual bool    addToWorldInternal(World* world) ;

    //! Remove the object from the world
    /*!
     * Internally invoked by World::removeObject
     */
    virtual bool    removeFromWorldInternal(World* world) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Generate a unique ID
    unsigned int            generateID(void) ;

    //! Get the ID
    inline unsigned int     getID(void) const ;


    //! Set the ID. Internal use only
    void                    setIDInternal(unsigned int id) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Set the World. Internal use only
    void                    setWorldInternal(World* world) ;

    //! Get the world
    inline World*           getWorld(void) ;

    //! Get the const world
    inline const World*     getWorld(void) const ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Set the user object
    inline void                 setUserObject(osg::Object* obj) ;

    //! Get the user object
    inline osg::Object*         getUserObject(void) ;

    //! Get the const user object
    inline const osg::Object*   getUserObject(void) const ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Part of the interaction system (experimental)
    inline const osg::BoundingSphere&   getInteractingSphere(void) const ;

    //! Part of the interaction system (experimental)
    inline void     setInteractingSphere(const osg::BoundingSphere& bs) ;

    //! Part of the interaction system (experimental)
    inline void     setInteractingSphere(const osg::Vec3& center, double radius) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    virtual const osg::BoundingSphere&  getBound(void) const ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Internal use only
    virtual void    callUpdateCallbackInternal(void) ;

    //! Internal use only
    virtual void    callPostUpdateCallbackInternal(void) ;
/* ======================================================================= */




/* ======================================================================= */
private:
    osg::ref_ptr<ODECallback>   m_update_callback ;
    osg::ref_ptr<ODECallback>   m_post_update_callback ;

    osg::observer_ptr<World>    m_world ;

    unsigned int    m_ID ;

    osg::ref_ptr<osg::Object>   m_user_object ;

    osg::BoundingSphere         m_interacting_sphere ;
    
    osg::BoundingSphere         m_bounding_sphere ;
/* ======================================================================= */




/* ======================================================================= */
private:
    static unsigned int s_last_id ;
/* ======================================================================= */
} ;
/* ....................................................................... */
/* ======================================================================= */




} // namespace osgODE




#include "ODEObject.inl"




#endif /* _OSGODE_ODEOBJECT_HPP */
