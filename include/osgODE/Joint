/*!
 * @file Joint
 * @author Rocco Martino
 */
/***************************************************************************
 *   Copyright (C) 2010 - 2012 by Rocco Martino                            *
 *   martinorocco@gmail.com                                                *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Lesser General Public License as        *
 *   published by the Free Software Foundation; either version 2.1 of the  *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU Lesser General Public License for more details.                   *
 *                                                                         *
 *   You should have received a copy of the GNU Lesser General Public      *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#ifndef _OSGODE_JOINT_HPP
#define _OSGODE_JOINT_HPP




/* ======================================================================= */
#include <osgODE/RigidBody>
#include <osgODE/JointFeedback>

#include <osg/observer_ptr>
/* ======================================================================= */




namespace osgODE
{




/* ======================================================================= */
class   World ;
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
//! Base class for a joint
/*!
 * As the RigidBody does, the Joint clones and destroy the dJointID during
 * the world add and remove
 */
class OSG_EXPORT Joint: public Transformable
{
/* ======================================================================= */
public:
             Joint(void) ;
             Joint(const Joint& other, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY) ;

protected:
    virtual ~Joint(void) ;
/* ======================================================================= */




/* ======================================================================= */
public:
//  META_Object(osgODE, Joint) ;
/* ======================================================================= */









/* ======================================================================= */
public:
    //! Enable/Disable
    inline void     setJointEnabled(bool flag) ;

    //! Enable/Disable
    inline bool     getJointEnabled(void) const ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Set the first body
    void                        setBody1(RigidBody* body) ;

    //! Set the second body
    void                        setBody2(RigidBody* body) ;


    //! Get the first body
    inline RigidBody*           getBody1(void) ;

    //! Get the const first body
    inline const RigidBody*     getBody1(void) const ;


    //! Get the second body
    inline RigidBody*           getBody2(void) ;

    //! Get the const second body
    inline const RigidBody*     getBody2(void) const ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Set the param value.
    /*!
     * see http://ode-wiki.org/wiki/index.php?title=Manual:_Joint_Types_and_Functions#Parameter_Functions
     */
    inline void     setParam(int param, ooReal value) ;

    //! Set the first axis
    inline void     setAxis1(const osg::Vec3& axis) ;

    //! Set the second axis
    inline void     setAxis2(const osg::Vec3& axis) ;

    //! Set the third axis
    inline void     setAxis3(const osg::Vec3& axis) ;

    //! Set the anchor relative to the first body
    inline void     setAnchor1(const osg::Vec3& anchor) ;

    //! Set the anchor relative to the second body
    /*!
     * This method affects the "double joints" introduced by Joseph Cooper
     */
    inline void     setAnchor2(const osg::Vec3& anchor) ;


    //! Get the param value
    /*!
     * see http://ode-wiki.org/wiki/index.php?title=Manual:_Joint_Types_and_Functions#Parameter_Functions
     */
    inline ooReal               getParam(int param) ;

    //! Get the first axis
    inline const osg::Vec3&     getAxis1(void) ;

    //! Get the second axis
    inline const osg::Vec3&     getAxis2(void) ;

    //! Get the third axis
    inline const osg::Vec3&     getAxis3(void) ;

    //! Get the body1 anchor
    inline const osg::Vec3&     getAnchor1(void) ;

    //! Get the body2 anchor
    inline const osg::Vec3&     getAnchor2(void) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Get informations about the forces that this joint applies to the bodies
    inline void                     setJointFeedback(JointFeedback* feedback) ;

    //! Get informations about the forces that this joint applies to the bodies
    inline const JointFeedback*     getJointFeedback(void) const ;

    //! Get informations about the forces that this joint applies to the bodies
    inline const JointFeedback*     getOrCreateJointFeedback(void) ;
/* ======================================================================= */




/* ======================================================================= */
protected:
    //! Invoke the appropriate dJointSet*Param
    virtual void    setParamImplementation(int param, ooReal value) ;

    //! Invoke the appropriate dJointSet*Axis1
    virtual void    setAxis1Implementation(const osg::Vec3& axis) ;

    //! Invoke the appropriate dJointSet*Axis2
    virtual void    setAxis2Implementation(const osg::Vec3& axis) ;

    //! Invoke the appropriate dJointSet*Axis3
    virtual void    setAxis3Implementation(const osg::Vec3& axis) ;

    //! Invoke the appropriate dJointSet*Anchor
    virtual void    setAnchor1Implementation(const osg::Vec3& anchor) ;

    //! Invoke the appropriate dJointSet*Anchor2
    virtual void    setAnchor2Implementation(const osg::Vec3& anchor) ;


    //! Invoke the appropriate dJointGet*Param
    virtual ooReal  getParamImplementation(int param) ;

    //! Invoke the appropriate dJointGet*Axis1
    virtual void    readAxis1Implementation(osg::Vec3& axis) ;

    //! Invoke the appropriate dJointGet*Axis2
    virtual void    readAxis2Implementation(osg::Vec3& axis) ;

    //! Invoke the appropriate dJointGet*Axis3
    virtual void    readAxis3Implementation(osg::Vec3& axis) ;

    //! Invoke the appropriate dJointGet*Anchor
    virtual void    readAnchor1Implementation(osg::Vec3& anchor) ;

    //! Invoke the appropriate dJointGet*Anchor2
    virtual void    readAnchor2Implementation(osg::Vec3& anchor) ;


    //! Get a copy of the dJointID
    virtual dJointID    cloneODEJoint(dWorldID world) const = 0 ;



    //! Give effect to the joint
    /*!
     * It has a generic behaviour, but some joints need a special
     * treatment so it is virtual
     */
    virtual void        finalize(void) ;


    //! Initialize the parameters
    /*!
     * This is called by the constructor
     */
    void        _initParams(void) ;

    //! Restore stored parameters
    void        _restoreParams(void) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Used by RigidBody::_notifyJoints
    inline                  void checkBodiesInternal(void) ;


    //! Add this joint to the world. Internal use only
    virtual bool            addToWorldInternal(World* world) ;

    //! Remove this joint from the world. Internal use only
    virtual bool            removeFromWorldInternal(World* world) ;


    //! Directly set the dJointID. Internal use only
    inline void             setODEJointInternal(dJointID j) ;

    //! Get the dJointID
    inline dJointID         getODEJoint(void) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    virtual Joint*      asJoint(void) ;

    virtual void        postUpdate(ooReal step_size) ;
/* ======================================================================= */




/* ======================================================================= */
protected:
    bool    m_ensure_two_bodies ;


    osg::ref_ptr<RigidBody>     m_body1 ;
    osg::ref_ptr<RigidBody>     m_body2 ;

    dJointID                    m_ODE_joint ;



    typedef void    (*SetVec3Prototype)     (dJointID, dReal, dReal, dReal) ;
    typedef void    (*SetParamPrototype)    (dJointID, int, dReal) ;
    typedef void    (*GetVec3Prototype)     (dJointID, dVector3) ;
    typedef dReal   (*GetParamPrototype)    (dJointID, int) ;

    class OSG_EXPORT Functions {
    public:

        Functions(void):
            SetAxis1(NULL),
            SetAxis2(NULL),
            SetAxis3(NULL),
            SetAnchor1(NULL),
            SetAnchor2(NULL),
            SetParam(NULL),
            GetAxis1(NULL),
            GetAxis2(NULL),
            GetAxis3(NULL),
            GetAnchor1(NULL),
            GetAnchor2(NULL),
            GetParam(NULL) {}

        Functions(const Functions& other):
            SetAxis1(other.SetAxis1),
            SetAxis2(other.SetAxis2),
            SetAxis3(other.SetAxis3),
            SetAnchor1(other.SetAnchor1),
            SetAnchor2(other.SetAnchor2),
            SetParam(other.SetParam),
            GetAxis1(other.GetAxis1),
            GetAxis2(other.GetAxis2),
            GetAxis3(other.GetAxis3),
            GetAnchor1(other.GetAnchor1),
            GetAnchor2(other.GetAnchor2),
            GetParam(other.GetParam) {}


        SetVec3Prototype    SetAxis1 ;
        SetVec3Prototype    SetAxis2 ;
        SetVec3Prototype    SetAxis3 ;
        SetVec3Prototype    SetAnchor1 ;
        SetVec3Prototype    SetAnchor2 ;
        SetParamPrototype   SetParam ;

        GetVec3Prototype    GetAxis1 ;
        GetVec3Prototype    GetAxis2 ;
        GetVec3Prototype    GetAxis3 ;
        GetVec3Prototype    GetAnchor1 ;
        GetVec3Prototype    GetAnchor2 ;
        GetParamPrototype   GetParam ;
    } ;

    Functions   m_functions ;
/* ======================================================================= */




/* ======================================================================= */
private:
    osg::ref_ptr<JointFeedback>     m_feedback ;


    osg::Vec3   m_anchor1 ;
    osg::Vec3   m_anchor2 ;

    osg::Vec3   m_axis1 ;
    osg::Vec3   m_axis2 ;
    osg::Vec3   m_axis3 ;




    typedef std::map<int, ooReal> ParamMap ;
    ParamMap    m_param_map ;
/* ======================================================================= */
} ;
/* ....................................................................... */
/* ======================================================================= */




} // namespace osgODE




#include "Joint.inl"




#endif /* _OSGODE_JOINT_HPP */
