/*!
 * @file Events
 * @author Rocco Martino
 */
/***************************************************************************
 *   Copyright (C) 2014 by Rocco Martino                                   *
 *   martinorocco@gmail.com                                                *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Lesser General Public License as        *
 *   published by the Free Software Foundation; either version 2.1 of the  *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU Lesser General Public      *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#ifndef _OSGODE_EVENTS_HPP
#define _OSGODE_EVENTS_HPP




/* ======================================================================= */
#include <osg/View>
#include <osg/Vec2>
#include <osg/Matrix>
#include <osg/observer_ptr>
/* ======================================================================= */




namespace osgODE
{




/* ======================================================================= */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
//!
/*!
 *
 */
class OSG_EXPORT Events: public osg::Object
{
/* ======================================================================= */
public:
             Events(void) ;
             Events(const Events& other, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY) ;

protected:
    virtual ~Events(void) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    META_Object(osgODE, Events) ;
/* ======================================================================= */









/* ======================================================================= */
public:
    //! Set the cursor position
    inline void setCursorPosition( const osg::Vec2& cursor_position ) ;

    //! Get the cursor position
    inline osg::Vec2& getCursorPosition(void) ;

    //! Get the const cursor position
    inline const osg::Vec2& getCursorPosition(void) const ;

    //! Set the normalized cursor position
    inline void setNormalizedCursorPosition( const osg::Vec2& normalized_cursor_position ) ;

    //! Get the normalized cursor position
    inline osg::Vec2& getNormalizedCursorPosition(void) ;

    //! Get the const normalized cursor position
    inline const osg::Vec2& getNormalizedCursorPosition(void) const ;

    //! Set the relative cursor position
    inline void setRelativeCursorPosition( const osg::Vec2& relative_cursor_position ) ;

    //! Get the relative cursor position
    inline osg::Vec2& getRelativeCursorPosition(void) ;

    //! Get the const relative cursor position
    inline const osg::Vec2& getRelativeCursorPosition(void) const ;

    //! Set the button mask
    inline void setButtonMask( unsigned int button_mask ) ;

    //! Get the const button mask
    inline unsigned int getButtonMask(void) const ;

    //! Set the view
    inline void setView( osg::View* view ) ;

    //! Get the view
    inline osg::View* getView(void) ;

    //! Get the const view
    inline const osg::View* getView(void) const ;

    //! Get the const inverse projection matrix
    inline const osg::Matrix& getInverseViewProjectionMatrix(void) ;

    //! returns true if the key is pressed
    inline bool isKeyPressed(unsigned int keysym) const ;

    //! set the key state
    inline void setKeyPressed(unsigned int keysym, bool pressed) ;

    //! set the warp pointer
    inline void setWarpPointer( bool enabled, const osg::Vec2& warp_pointer = osg::Vec2(), bool normalized = false ) ;

    //! get the const warp pointer
    inline bool getWarpPointer( osg::Vec2& warp_pointer, bool& normalized ) const ;

    //! set the motion
    inline void setMotion( bool motion ) ;

    //! get the const motion
    inline bool getMotion(void) const ;
/* ======================================================================= */




/* ======================================================================= */
public:
    void    copy( const Events* other ) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    class OSG_EXPORT ViewMatrix
    {
    public:
        ViewMatrix(const osg::Matrix& m = osg::Matrix::identity(), unsigned int p=0):
            m_view      ( m ),
            m_priority  ( p ) {}

        ViewMatrix(const ViewMatrix& other):
            m_view      ( other.m_view ),
            m_priority  ( other.m_priority ) {}

        inline void set(const ViewMatrix& vm)
        {
            m_view = vm.m_view ;
            m_priority = vm.m_priority ;
        }

        inline void setPriority(unsigned int p)
        {
            m_priority = p ;
        }

        inline unsigned int getPriority(void) const
        {
            return m_priority ;
        }

        inline const osg::Matrix& getMatrix(void) const
        {
            return m_view ;
        }

        inline void setMatrix( const osg::Matrix& m)
        {
            m_view = m ;
        }

    private:
        osg::Matrix     m_view ;
        unsigned int    m_priority ;
    } ;

    inline void requestViewMatrix( const ViewMatrix& vm ) ;

    inline ViewMatrix&          getViewMatrix(void) ;
    inline const ViewMatrix&    getViewMatrix(void) const ;
/* ======================================================================= */




/* ======================================================================= */
public:
    inline unsigned int getFrameCounterInternal(void) const ;
    inline void         incFrameCounterInternal(void) ;
/* ======================================================================= */




/* ======================================================================= */
private:
    osg::Vec2       m_cursor_position ;
    osg::Vec2       m_normalized_cursor_position ;
    osg::Vec2       m_relative_cursor_position ;
    unsigned int    m_button_mask ;

    bool            m_dirty_view_projection ;
    osg::Matrix     m_inverse_view_projection ;

    unsigned int    m_frame_counter ;

    bool            m_key_pressed[256] ;

    osg::observer_ptr<osg::View>    m_view ;

    ViewMatrix  m_view_matrix ;

    bool            m_warp_pointer_enabled ;
    bool            m_warp_pointer_normalized ;
    osg::Vec2       m_warp_pointer ;

    bool        m_motion ;
/* ======================================================================= */
} ;
/* ....................................................................... */
/* ======================================================================= */




} // namespace osgODE




#include "Events.inl"




#endif /* _OSGODE_EVENTS_HPP */
