/*!
 * @file BypassJoint
 * @author Rocco Martino
 */
/***************************************************************************
 *   Copyright (C) 2013 - 2015 by Rocco Martino                            *
 *   martinorocco@gmail.com                                                *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Lesser General Public License as        *
 *   published by the Free Software Foundation; either version 2.1 of the  *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU Lesser General Public      *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#ifndef _OSGODE_BYPASSJOINT_HPP
#define _OSGODE_BYPASSJOINT_HPP




/* ======================================================================= */
#include <osgODE/Joint>
/* ======================================================================= */




namespace osgODE
{




/* ======================================================================= */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
//! Transmits the joint equation
/*!
 *
 */
class OSG_EXPORT BypassJoint: public Joint
{
/* ======================================================================= */
public:
             BypassJoint(void) ;
             BypassJoint(const BypassJoint& other, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY) ;

protected:
    virtual ~BypassJoint(void) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    META_Object(osgODE, BypassJoint) ;
/* ======================================================================= */









/* ======================================================================= */
public:
    //! Set the relative transformation from body1 to bidy2.
    /*!
     * Set the matrix that tansforms body1 to body2. If one of the two is
     * NULL, the matrix holds the absolute transformation of the valid body.
     * */
    inline void setInitialTransformation( const osg::Matrix& initial_transformation ) ;

    //! Get the relative transformation from body1 to bidy2.
    inline osg::Matrix& getInitialTransformation(void) ;

    //! Get the const relative transformation from body1 to bidy2.
    inline const osg::Matrix& getInitialTransformation(void) const ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Set the specified row
    void setRow(    unsigned int row,
                    const osg::Vec3& J1a,
                    const osg::Vec3& J1l,
                    const osg::Vec3& J2a,
                    const osg::Vec3& J2l,
                    ooReal rhs,
                    ooReal cfm ) ;



    //! Get the specified row
    void getRow(    unsigned int row,
                    osg::Vec3& J1a,
                    osg::Vec3& J1l,
                    osg::Vec3& J2a,
                    osg::Vec3& J2l,
                    ooReal& rhs,
                    ooReal& cfm ) const ;



    //! Set SureMaxInfo and Info1
    inline void setInfo(    unsigned int max_m,
                            unsigned int m,
                            unsigned int nub ) ;

    //! Get SureMaxInfo and Info1
    inline void getInfo(    unsigned int& max_m,
                            unsigned int& m,
                            unsigned int& nub ) const ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Set the parameter
    virtual void    setParamImplementation(int param, ooReal value) ;

    //! Set the first axis
    virtual void    setAxis1Implementation(const osg::Vec3& axis) ;

    //! Set the second axis
    virtual void    setAxis2Implementation(const osg::Vec3& axis) ;

    //! Set the third axis
    virtual void    setAxis3Implementation(const osg::Vec3& axis) ;

    //! Set the first anchor
    virtual void    setAnchor1Implementation(const osg::Vec3& anchor) ;

    //! Set the second anchor
    virtual void    setAnchor2Implementation(const osg::Vec3& anchor) ;

    //! Get the parameter
    virtual ooReal  getParamImplementation(int param) ;

    //! Get the first axis
    virtual void    readAxis1Implementation(osg::Vec3& axis) ;

    //! Get the second axis
    virtual void    readAxis2Implementation(osg::Vec3& axis) ;

    //! Get the third axis
    virtual void    readAxis3Implementation(osg::Vec3& axis) ;

    //! Get the first anchor
    virtual void    readAnchor1Implementation(osg::Vec3& anchor) ;

    //! Get the second anchor
    virtual void    readAnchor2Implementation(osg::Vec3& anchor) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Create the joint (Joint::finalize) then compute the initial transform
    virtual void        finalize(void) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    virtual BypassJoint*    asBypassJoint(void) ;
/* ======================================================================= */




/* ======================================================================= */
protected:
    typedef enum {
        CONSTRAIN_NONE  = 0,
        CONSTRAIN_BODY1 = 1,
        CONSTRAIN_BODY2 = 2,
        CONSTRAIN_ALL   = CONSTRAIN_BODY1 | CONSTRAIN_BODY2
    } BodyMask ;


    //! Set the relative quaternion between the bodies
    void    setRelativeRotation(    ooReal              step_size,
                                    const osg::Quat&    qrel,
                                    int&                row,
                                    ooReal              erp = 1.0,
                                    ooReal              cfm = 0.0,
                                    BodyMask            mask = CONSTRAIN_ALL
                               ) ;


    //! Set the distance between the bodies
    void    setRelativePosition(    ooReal              step_size,
                                    const osg::Vec3&    prel,
                                    int&                row,
                                    ooReal              erp = 1.0,
                                    ooReal              cfm = 0.0,
                                    BodyMask            mask = CONSTRAIN_ALL
                               ) ;
/* ======================================================================= */




/* ======================================================================= */
protected:
    virtual dJointID    cloneODEJoint(dWorldID world) const ;
/* ======================================================================= */




/* ======================================================================= */
protected:
    ooReal          m_lo_stop[6] ;
    ooReal          m_hi_stop[6] ;
    ooReal          m_vel[6] ;
    ooReal          m_lo_vel[6] ;
    ooReal          m_hi_vel[6] ;
    ooReal          m_f_max[6] ;
    ooReal          m_fudge_factor[6] ;
    ooReal          m_bounce[6] ;
    ooReal          m_cfm[6] ;
    ooReal          m_stop_erp[6] ;
    ooReal          m_stop_cfm[6] ;
    ooReal          m_suspension_erp[6] ;
    ooReal          m_suspension_cfm[6] ;
    ooReal          m_erp[6] ;


    osg::Vec3       m_anchor1 ;
    osg::Vec3       m_anchor2 ;

    osg::Vec3       m_axis1 ;
    osg::Vec3       m_axis2 ;
    osg::Vec3       m_axis3 ;

    osg::Matrix     m_initial_transformation ;
    bool            m_initial_transformation_set ;
/* ======================================================================= */
} ;
/* ....................................................................... */
/* ======================================================================= */




} // namespace osgODE




#include "BypassJoint.inl"




#endif /* _OSGODE_BYPASSJOINT_HPP */
