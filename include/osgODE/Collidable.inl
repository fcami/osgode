/*!
 * @file Collidable.inl
 * @author Rocco Martino
 */
/***************************************************************************
 *   Copyright (C) 2010 by Rocco Martino                                   *
 *   martinorocco@gmail.com                                                *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Lesser General Public License as        *
 *   published by the Free Software Foundation; either version 2.1 of the  *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU Lesser General Public License for more details.                   *
 *                                                                         *
 *   You should have received a copy of the GNU Lesser General Public      *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#ifndef _OSGODE_COLLIDABLE_INL
#define _OSGODE_COLLIDABLE_INL

/* ======================================================================= */
/* ....................................................................... */
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::Collidable::setGeometryEnabled(bool flag)
{
    flag ?
        dGeomEnable(m_ODE_geom)
        :
        dGeomDisable(m_ODE_geom) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline bool
osgODE::Collidable::getGeometryEnabled(void) const
{
    return dGeomIsEnabled(m_ODE_geom) != 0 ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline dGeomID
osgODE::Collidable::getODEGeom(void) const
{
    return m_ODE_geom ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::Collidable::setCollisionParameters(osgODE::CollisionParameters* cp)
{
    m_collision_parameters = cp ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline osgODE::CollisionParameters*
osgODE::Collidable::getCollisionParameters(void)
{
    return m_collision_parameters.get() ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline const osgODE::CollisionParameters*
osgODE::Collidable::getCollisionParameters(void) const
{
    return m_collision_parameters.get() ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline const osg::Matrix&
osgODE::Collidable::getCollidableOffset(void) const
{
    return m_matrix_offset ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::Collidable::setCollisionCallback(CollisionCallback* cbk)
{
    m_collision_callback = cbk ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::Collidable::addCollisionCallback(CollisionCallback* cbk)
{
    if( m_collision_callback.valid() ) {
        m_collision_callback->addNestedCallback(cbk) ;
    } else {
        setCollisionCallback(cbk) ;
    }
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::Collidable::removeCollisionCallback(CollisionCallback* cbk)
{
    if(cbk) {
        if( cbk == m_collision_callback.get()) {
            m_collision_callback = m_collision_callback->getNestedCallback() ;
        } else {
            if( m_collision_callback.valid() ) {
                m_collision_callback->removeNestedCallback(cbk) ;
            }
        }
    }
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline osgODE::CollisionCallback*
osgODE::Collidable::getCollisionCallback(void)
{
    return m_collision_callback.get() ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline const osgODE::CollisionCallback*
osgODE::Collidable::getCollisionCallback(void) const
{
    return m_collision_callback.get() ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::Collidable::setCategoryBits(unsigned int bits)
{
    dGeomSetCategoryBits(m_ODE_geom, bits) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline unsigned int
osgODE::Collidable::getCategoryBits(void) const
{
    return dGeomGetCategoryBits(m_ODE_geom) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::Collidable::setCollideBits(unsigned int bits)
{
    dGeomSetCollideBits(m_ODE_geom, bits) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline unsigned int
osgODE::Collidable::getCollideBits(void) const
{
    return dGeomGetCollideBits(m_ODE_geom) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::Collidable::setLastCollisionFrame( unsigned int last_collision_frame )
{
    m_last_collision_frame = last_collision_frame ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline unsigned int
osgODE::Collidable::getLastCollisionFrame(void) const
{
    return m_last_collision_frame ;
}
/* ....................................................................... */
/* ======================================================================= */




#endif /* _OSGODE_COLLIDABLE_INL */
