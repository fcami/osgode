/*!
 * @file RigidBody.inl
 * @author Rocco Martino
 */
/***************************************************************************
 *   Copyright (C) 2010 by Rocco Martino                                   *
 *   martinorocco@gmail.com                                                *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Lesser General Public License as        *
 *   published by the Free Software Foundation; either version 2.1 of the  *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU Lesser General Public License for more details.                   *
 *                                                                         *
 *   You should have received a copy of the GNU Lesser General Public      *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#ifndef _OSGODE_RIGIDBODY_INL
#define _OSGODE_RIGIDBODY_INL

/* ======================================================================= */
/* ....................................................................... */
#include <osgODE/Joint>
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setBodyEnabled(bool flag)
{
    flag ?
        dBodyEnable(m_ODE_body)
        :
        dBodyDisable(m_ODE_body) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline bool
osgODE::RigidBody::getBodyEnabled(void) const
{
    return dBodyIsEnabled(m_ODE_body) != 0 ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setAutoDisableSteps(unsigned int steps)
{
    dBodySetAutoDisableSteps(m_ODE_body, steps) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline unsigned int
osgODE::RigidBody::getAutoDisableSteps(void) const
{
    return dBodyGetAutoDisableSteps(m_ODE_body) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setAutoDisableTime(double secs)
{
    dBodySetAutoDisableTime(m_ODE_body, secs) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline double
osgODE::RigidBody::getAutoDisableTime(void) const
{
    return dBodyGetAutoDisableTime(m_ODE_body) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setAutoDisableLinearThreshold(double speed)
{
    dBodySetAutoDisableLinearThreshold(m_ODE_body, speed) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline double
osgODE::RigidBody::getAutoDisableLinearThreshold(void) const
{
    return dBodyGetAutoDisableLinearThreshold(m_ODE_body) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setAutoDisableAngularThreshold(double speed)
{
    dBodySetAutoDisableAngularThreshold(m_ODE_body, speed) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline double
osgODE::RigidBody::getAutoDisableAngularThreshold(void) const
{
    return dBodyGetAutoDisableAngularThreshold(m_ODE_body) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setAutoDisableAverageSamplesCount(unsigned int n)
{
    dBodySetAutoDisableAverageSamplesCount(m_ODE_body, n) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline unsigned int
osgODE::RigidBody::getAutoDisableAverageSamplesCount(void) const
{
    return dBodyGetAutoDisableAverageSamplesCount(m_ODE_body) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setAutoDisableFlag(bool flag)
{
    dBodySetAutoDisableFlag(m_ODE_body, flag ? (unsigned int)-1 : 0) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline bool
osgODE::RigidBody::getAutoDisableFlag(void) const
{
    return dBodyGetAutoDisableFlag(m_ODE_body) != 0 ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline dBodyID
osgODE::RigidBody::getODEBody(void) const
{
    return m_ODE_body ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::addJointInternal(osgODE::Joint* joint)
{
    m_joints.push_back( joint ) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::removeJointInternal(osgODE::Joint* joint)
{
    for(    Joints::iterator    iter = m_joints.begin();
            iter != m_joints.end();
            iter++ ) {

        if(iter->get() == joint) {
            m_joints.erase(iter) ;
            break ;
        }
    }
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setPosition(const osg::Vec3& position)
{
    dBodySetPosition(m_ODE_body, position.x(), position.y(), position.z()) ;
    this->updateTransformInternal() ;

    if( m_update_interacting_sphere ) {
        _updateInteractingSphere() ;
    }
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline osg::Vec3
osgODE::RigidBody::getPosition(void) const
{
    const dReal*    p = dBodyGetPosition(m_ODE_body) ;

    return osg::Vec3(p[0], p[1], p[2]) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setQuaternion(const osg::Quat& quaternion)
{
    dQuaternion q ;
    q[0] = quaternion.w() ;
    q[1] = quaternion.x() ;
    q[2] = quaternion.y() ;
    q[3] = quaternion.z() ;

    dBodySetQuaternion(m_ODE_body, q) ;

    this->updateTransformInternal() ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline osg::Quat
osgODE::RigidBody::getQuaternion(void) const
{
    const dReal*    q = dBodyGetQuaternion(m_ODE_body) ;

    return osg::Quat(q[1], q[2], q[3], q[0]) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setMatrix(const osg::Matrix& matrix)
{
    const dReal rotation[] = {  matrix(0,0), matrix(1,0), matrix(2,0), 0.0,
                                matrix(0,1), matrix(1,1), matrix(2,1), 0.0,
                                matrix(0,2), matrix(1,2), matrix(2,2), 0.0 } ;


    dBodySetPosition(m_ODE_body, matrix(3,0), matrix(3,1), matrix(3,2)) ;
    dBodySetRotation(m_ODE_body, rotation) ;


    this->updateTransformInternal() ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline osg::Matrix
osgODE::RigidBody::getMatrix(void) const
{
    const dReal*    r = dBodyGetRotation(m_ODE_body) ;
    const dReal*    p = dBodyGetPosition(m_ODE_body) ;


    return  osg::Matrix(    r[0],   r[4],   r[8],   0.0,
                            r[1],   r[5],   r[9],   0.0,
                            r[2],   r[6],   r[10],  0.0,
                            p[0],   p[1],   p[2],   1.0 ) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setLinearVelocity(const osg::Vec3& linear_velocity)
{
    dBodySetLinearVel(m_ODE_body, linear_velocity.x(), linear_velocity.y(), linear_velocity.z()) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline osg::Vec3
osgODE::RigidBody::getLinearVelocity(void) const
{
    const dReal*    v = dBodyGetLinearVel(m_ODE_body) ;

    return osg::Vec3(v[0], v[1], v[2]) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setAngularVelocity(const osg::Vec3& angular_velocity)
{
    dBodySetAngularVel(m_ODE_body, angular_velocity.x(), angular_velocity.y(), angular_velocity.z()) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline osg::Vec3
osgODE::RigidBody::getAngularVelocity(void) const
{
    const dReal*    v = dBodyGetAngularVel(m_ODE_body) ;

    return osg::Vec3(v[0], v[1], v[2]) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setMaxAngularSpeed(double s)
{
    dBodySetMaxAngularSpeed(m_ODE_body, s) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline double
osgODE::RigidBody::getMaxAngularSpeed(void) const
{
    return dBodyGetMaxAngularSpeed(m_ODE_body) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline const osg::Vec3&
osgODE::RigidBody::getLinearAcceleration(void) const
{
    return m_linear_acceleration ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline const osg::Vec3&
osgODE::RigidBody::getAngularAcceleration(void) const
{
    return m_angular_acceleration ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline osg::Vec3
osgODE::RigidBody::getPointVelocity(const osg::Vec3& p, bool local) const
{
    dVector3    result ;

    if( local ) {
        dBodyGetRelPointVel(m_ODE_body, p.x(), p.y(), p.z(), result) ;
    } else {
        dBodyGetPointVel(m_ODE_body, p.x(), p.y(), p.z(), result) ;
    }


    return osg::Vec3(result[0], result[1], result[2]) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setKinematic(bool flag)
{
    flag ?
            dBodySetKinematic(m_ODE_body)
            :
            dBodySetDynamic(m_ODE_body) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline bool
osgODE::RigidBody::getKinematic(void) const
{
    return dBodyIsKinematic(m_ODE_body) != 0 ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setGravityMode(bool flag)
{
    dBodySetGravityMode( m_ODE_body, flag ? 1 : 0 ) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline bool
osgODE::RigidBody::getGravityMode(void) const
{
    return dBodyGetGravityMode(m_ODE_body) != 0 ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setGyroscopicMode(bool flag)
{
    return dBodySetGyroscopicMode(m_ODE_body, flag ? 1 : 0) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline bool
osgODE::RigidBody::getGyroscopicMode(void) const
{
    return dBodyGetGyroscopicMode(m_ODE_body) != 0 ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setDamping(double linear, double angular)
{
    dBodySetDamping(m_ODE_body, linear, angular) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::getDamping(double& linear, double& angular) const
{
    linear = dBodyGetLinearDamping(m_ODE_body) ;
    angular = dBodyGetAngularDamping(m_ODE_body) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setLinearDamping(double d)
{
    dBodySetDamping(m_ODE_body, d, dBodyGetAngularDamping(m_ODE_body)) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline double
osgODE::RigidBody::getLinearDamping(void) const
{
    return dBodyGetLinearDamping(m_ODE_body) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setLinearDampingThreshold(double threshold)
{
    dBodySetLinearDampingThreshold(m_ODE_body, threshold) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline double
osgODE::RigidBody::getLinearDampingThreshold(void) const
{
    return dBodyGetLinearDampingThreshold(m_ODE_body) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setAngularDamping(double d)
{
    dBodySetDamping(m_ODE_body, dBodyGetLinearDamping(m_ODE_body), d) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline double
osgODE::RigidBody::getAngularDamping(void) const
{
    return dBodyGetAngularDamping(m_ODE_body) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setAngularDampingThreshold(double threshold)
{
    dBodySetAngularDampingThreshold(m_ODE_body, threshold) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline double
osgODE::RigidBody::getAngularDampingThreshold(void) const
{
    return dBodyGetAngularDampingThreshold(m_ODE_body) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setFiniteRotationMode(bool flag)
{
    dBodySetFiniteRotationMode(m_ODE_body, flag ? 1 : 0) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline bool
osgODE::RigidBody::getFiniteRotationMode(void) const
{
    return dBodyGetFiniteRotationMode(m_ODE_body) != 0 ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setFiniteRotationAxis(const osg::Vec3& axis)
{
    dBodySetFiniteRotationAxis(m_ODE_body, axis.x(), axis.y(), axis.z()) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline osg::Vec3
osgODE::RigidBody::getFiniteRotationAxis(void) const
{
	dVector3	axis ;
    dBodyGetFiniteRotationAxis(m_ODE_body, axis) ;

	return osg::Vec3(axis[0], axis[1], axis[2]) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setForce(const osg::Vec3& f)
{
    dBodySetForce(m_ODE_body, f.x(), f.y(), f.z()) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setTorque(const osg::Vec3& t)
{
    dBodySetTorque(m_ODE_body, t.x(), t.y(), t.z()) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline osg::Vec3
osgODE::RigidBody::getForce(void) const
{
    const dReal*    v = dBodyGetForce(m_ODE_body) ;

    return osg::Vec3(v[0], v[1], v[2]) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline osg::Vec3
osgODE::RigidBody::getTorque(void) const
{
    const dReal*    v = dBodyGetTorque(m_ODE_body) ;

    return osg::Vec3(v[0], v[1], v[2]) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setUpdateInteractingSphere(bool flag)
{
    m_update_interacting_sphere = flag ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline bool
osgODE::RigidBody::getUpdateInteractingSphere(void) const
{
    return m_update_interacting_sphere ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline void
osgODE::RigidBody::setODEMass(const dMass& mass)
{
    // vedi setMass(double mass, const osg::Vec3& size, int type_class)
    bool    kinematic_flag = this->getKinematic() ;



    dBodySetMass(m_ODE_body, &mass) ;



    // vedi setMass(double mass, const osg::Vec3& size, int type_class)
    this->setKinematic( kinematic_flag ) ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline dMass
osgODE::RigidBody::getODEMass(void) const
{
    dMass   m ;
    dBodyGetMass( m_ODE_body, &m ) ;

    return m ;
}
/* ....................................................................... */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
inline double
osgODE::RigidBody::getMass(void) const
{
    dMass   m ;
    dBodyGetMass( m_ODE_body, &m ) ;

    return m.mass ;
}
/* ....................................................................... */
/* ======================================================================= */




#endif /* _OSGODE_RIGIDBODY_INL */
