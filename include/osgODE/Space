/*!
 * @file Space
 * @author Rocco Martino
 */
/***************************************************************************
 *   Copyright (C) 2010 - 2012 by Rocco Martino                            *
 *   martinorocco@gmail.com                                                *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Lesser General Public License as        *
 *   published by the Free Software Foundation; either version 2.1 of the  *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU Lesser General Public License for more details.                   *
 *                                                                         *
 *   You should have received a copy of the GNU Lesser General Public      *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#ifndef _OSGODE_SPACE_HPP
#define _OSGODE_SPACE_HPP




/* ======================================================================= */
#include <osgODE/World>
#include <osgODE/NearCallback>

#include <osgODE/ODE>
/* ======================================================================= */




namespace osgODE
{




/* ======================================================================= */
class   ODEObject ;
class   RigidBody ;
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
//! Collision handling
class OSG_EXPORT Space: public World
{
/* ======================================================================= */
public:
             Space(void) ;
             Space(const Space& other, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY) ;

protected:
    virtual ~Space(void) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    META_Object(osgODE, Space) ;
/* ======================================================================= */









/* ======================================================================= */
public:
    //! The result of a ray cast
    class OSG_EXPORT RayCastResult: public osg::Referenced
    {
    public:
             RayCastResult(void) {}
             RayCastResult(const RayCastResult& other): osg::Referenced(other) {}

    protected:
            ~RayCastResult(void) {}

    public:
        virtual void    reset(void) {}

        virtual void    addContact( Collidable* other,
                                    const osg::Vec3& position,
                                    const osg::Vec3& surface_normal,
                                    double distance ) = 0 ;
    } ;






    //! Ray parameters
    typedef enum {
        //! Return when the first collision between the ray and a trimesh occours
        FIRST_CONTACT   = 1,

        //! Do not collide against back facing triangles
        BACKFACE_CULL   = 2,

        //! Return the closest collision when collide with a trimesh
        CLOSEST_HIT     = 4,

        //! Default mode used
        DEFAULT_MODE    = BACKFACE_CULL | CLOSEST_HIT
    } RayParameter ;






    //! Perform a ray cast
    /*!
     * @param   from            where the ray starts
     *
     * @param   to              where the ray ends
     *
     * @param   result          If NULL there will be a SIGSEGV (or assert)
     *
     * @param   max_contacts    maximum number of contacts to generate
     *
     * @param   param_mask      See RayParameter
     *
     * @param   collide_bits    Default: -1
     *
     * @param   category_bits   Default: -1
     *
     * @return  number of contacts
     */
    unsigned int    performRayCast( const osg::Vec3&    from,
                                    const osg::Vec3&    to,
                                    RayCastResult*      result,
                                    unsigned int        max_contacts = 4,
                                    unsigned int        param_mask = DEFAULT_MODE,
                                    int                 collide_bits = -1,
                                    int                 category_bits = -1
                                  ) ;







    //! Perform a ray cast
    /*!
     * @param   from            where the ray starts
     *
     * @param   to              where the ray ends
     *
     * @param   result          If NULL there will be a SIGSEGV (or assert)
     *
     * @param   max_contacts    maximum number of contacts to generate
     *
     * @param   first_contact   dCollide returns the first collision between
     *                          the ray and a trimesh
     *
     * @param   backface_cull   consider only collision against front-facing
     *                          triangles
     *
     * @param   closest_hit     look for the nearest collision when colliding
     *                          with a trimesh
     *
     * @return  number of contacts
     */
    unsigned int    rayCast(    const osg::Vec3&    from,
                                const osg::Vec3&    to,
                                RayCastResult*      result,
                                unsigned int        max_contacts = 1,
                                bool                first_contact = true,
                                bool                backface_cull = true,
                                bool                closest_hit = false     ) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! collide, then World::update
    virtual void    update(double step_size=1.0/60.0) ;

    //! Invokes dCollide and the collision callbacks
    void    collide(void) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! This should never be used. Default: false
    inline void     setCleanup(bool mode) ;

    //! This should never be used. Default: false
    inline bool     getCleanup(void) const ;

    inline void         setSublevel(unsigned int sublevel) ;
    inline unsigned int getSublevel(void) const ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Get the dSpaceID
    inline dSpaceID     getODESpace(void) ;


    //! Set the near callback
    inline void     setNearCallback(NearCallback* nc) ;

    //! Get the near callback
    inline NearCallback*    getNearCallback(void) ;

    //! Get the const near callback
    inline const NearCallback*  getNearCallback(void) const ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! does nothing, return true
    virtual bool    addToWorldInternal(World* world) ;

    //! does nothing, return true
    virtual bool    removeFromWorldInternal(World* world) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    virtual Space*      asSpace(void) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Copy the space properties
    void        copySpace(const Space* other) ;
/* ======================================================================= */




/* ======================================================================= */
private:
    static void     _cloneODESpace(dSpaceID src, dSpaceID dst) ;
/* ======================================================================= */




/* ======================================================================= */
private:
    dSpaceID            m_ODE_space ;
    dNearCallback*      m_overlapping_pairs_dispatcher ;

    osg::ref_ptr<NearCallback>  m_near_callback ;
/* ======================================================================= */
} ;
/* ....................................................................... */
/* ======================================================================= */




} // namespace osgODE




#include "Space.inl"




#endif /* _OSGODE_SPACE_HPP */
