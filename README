//! @file README
//! @author Rocco Martino

/*! @mainpage osgODE




@section hello_section  Hello my friend,
I give you this software under the terms of the GNU LGPL.\n
I hope you appreciate it and have a nice day.\n
\n
\n
\n
\n
The <a href="http://www.ode.org">Open Dynamics Engine (ODE)</a> is a robust
physics engine with a very clean C public interface. \n
The <a href="http://www.openscenegraph.org">Open Scene Graph (OSG)</a> is a
set of well designed OpenGL based libraries.\n
\n
This library manipulates the data generated by ODE and uses them to show credible
dynamics in a virtual environment drawn by OSG.\n
It has been succefully tested on Windows Vista (x86), Windows 7 (64),
Android 2.3.3 (armeabi-v5) and variuos Slackware (x86 and x86-64)
\n
\n
\n
Source code: <a href="http://code.google.com/p/osgode/">http://code.google.com/p/osgode/</a>\n
Mailing list: <a href="https://groups.google.com/group/osgODE">http://groups.google.com/group/osgODE</a>\n
\n
\n
\n
\n
Click @ref WindowsBuild "here" for Windows build instructions
\n
\n
\n
\n
@section deps_section    Dependencies
In order to use the osgODE namespace you need the ODE and the OSG.\n

You can find the first at <a href="http://www.ode.org">www.ode.org</a>.\n
The OSG is at
<a href="http://www.openscenegraph.org">www.openscenegraph.org</a>, but it's
about to migrate to
<a href="http://www.openscenegraph.com">www.openscenegraph.com</a> \n
\n
I will certainly use the 3.0.1 version of the OSG for 0.8 and 0.9 releases. \n
The ODE version will change more frequently because I update my local copy of
the sources almost every day; I will specify the revision number in the release
notes.\n
\n
\n
The first thing you do you will probably be to build and install ODE.\n
To make everything work, it should be appropriate we use the same
configuration options. Here are mine:
@verbatim
$ svn checkout svn://svn.code.sf.net/p/opende/code/trunk ODE -r 1939
$ cd ODE
$ patch -p0 -i /path/to/osgODE-X.Y.Z/patches/ode_patch.diff
$ ./bootstrap
$ ./configure --prefix=/usr/local \
>             --enable-shared \
>             --disable-static \
>             --enable-double-precision \
>             --disable-demos \
>             --enable-ou \
>             --enable-builtin-threading-impl \
>             --enable-libccd \
>             --with-trimesh=opcode \
>             --with-drawstuff=none
$ make
$ su
Password:
# make install
# exit
$
@endverbatim
The revision 1939 is just an example, check for the right one in
osgODE-X.Y.Z/deps \n
\n
\n
Now it's up to the OSG, it takes a lifetime:
@verbatim
$ unzip OpenSceneGraph-X.Y.Z.zip
$ cd OpenSceneGraph-X.Y.Z
$ ./configure
$ make -j 4
$ su
Password:
# make install
# exit
$
@endverbatim
\n
They will compile without any issue. If not, write to the proper mailing list,
both are very friendly.\n
\n
\n
\n
\n
\n
@section install_section    Compilation
Now it's time to compile the osgODE library. I suggest you to compile it with
debugging symbols, so I can help you more easly if something goes wrong.\n

@verbatim
$ tar xzvf osgODE-X.Y.Z.tar.gz
$ cd osgODE-X.Y.Z
$ mkdir build
$ cd build
$ cmake .. -DCMAKE_BUILD_TYPE=Debug
$ make
$ su
Password:
# make install
# exit
$
@endverbatim
\n
If everything is Ok you can proceed, otherwise you can write to the mailing
list.\n
\n
\n
Note that some 64 bit distributions do not include the directory
/usr/local/lib64 in the ldconfig search directories, so you have to manually
specify it in /etc/ld.so.conf and run ldconfig as root. Alternatively, you can
edit the file .bashrc in your home and add the following line:
@verbatim
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib64
@endverbatim
\n
\n
\n
You are about to verify the installation. \n
\n
In the osgODE-X.Y.Z folder there are various subfolders, but the most
interesting ones are "include", "src" and "examples".\n
Move to the "examples" directory, select one of the examples, compile and run
it. The simpliest test is located in the "osgoderigidbody" folder.\n
You need to link the osgODE and the osgDB.\n
\n
Shell:
@verbatim
$ g++ osgoderigidbody.cpp -o osgoderigidbody -losgODE -losgDB -losg -lode
@endverbatim
\n
or, if pkg-config did a goog job:
@verbatim
$ g++ osgoderigidbody.cpp -o osgoderigidbody \
> `pkg-config osgODE openscenegraph-osgDB --libs --cflags` -Wall
@endverbatim
\n
You should not see any warning or error message. As always, if something doesn't work feel free to contact me.\n

\n
The executable will produce a file named "output.osgb". If the osgviewer
application is able to load and show it, almost everything is certainly
working. \n
Once launched the commands below, you should see a R3 reference system
rotating counterclockwise around the Z axis, right hand rule, Z up (X:Red,
Y:Green, Z:Blue)
@verbatim
$ ./osgoderigidbody
$ osgviewer output.osgb
@endverbatim
\n
\n
\n
\n
@section quickstart_section    Working principles
I have worked hard to keep the interface clean and, in many cases, I think I
succeeded.\n
Much of the informations can be found in the "examples" folder, but I want to
explain some mechanisms now.\n
\n
The osgODE::RigidBody is the rigid body base class. First thing you notice,
looking at the class diagram, is that it does not inherit from osg::Node and,
therefore, it cannot be directly traversed by the visitors. To solve this
issue, each rigid body updates an osg::MatrixTransform.\n
Following pseudo-code gets the idea across:

@code
// This graph accepts the visitors and can be drawn
graph           = create_and_setup_graph() ;


// This object handles the dynamics of the body
rigid_body      = create_and_setup_body()


// This node contains the graphical properties of the body
node            = create_and_setup_graphics()


// Create and setup the world
dynamic_world   = create_and_setup_world() ;


// This transform is continuosly updated by the body and communicates position
// and rotation of the body in the space. It will be inserted into the graph
transform       = rigid_body->getMatrixTransform()
transform->addChild( node )

// Now we can connect the body to the world
dynamic_world->addObject( rigid_body )

// ...and the transform to the graph, so it can be traversed
graph->addChild( transform )

mainloop {
    update_dynamic_world() ;
    cull_draw_graph() ;
}
@endcode
\n
This design is still valid but, since the 0.4, it is possible to let the
visitors traverse the base objects of the library by setting a boolean value
in a special class named osgODE::Manager. The manager synchronizes a world
and diverts the visitors to it.\n
Under the new model, the above code becomes:
@code
// as above
graph           = create_and_setup_graph() ;

// as above
rigid_body      = create_and_setup_body()

// as above
node            = create_and_setup_graphics()

// as above
dynamic_world   = create_and_setup_world()

// as above
transform       = rigid_body->getMatrixTransform()
transform->addChild( node )

// as above
dynamic_world->addObject( rigid_body )


// In the create_and_setup_manager function we setup an update callback
// (there is a default one)
manager     = create_and_setup_manager()

// Tell the manager to redirect the visitors to the world and beyond
manager->setAcceptVisitors(true)

// Set the world
manager->setWorld( dynamic_world )

// The manager is a node, so it can be inserted into the graph
graph->addChild( manager )


// This is no longer necessary
//
// graph->addChild( transform )
//



mainloop {
    // The world is timed by the manager, so this is no longer needed:
    //
    // update_dynamic_world() ;
    //

    cull_draw_graph() ;
}
@endcode
\n
I'm working to isolate the dynamics-related thread but the current solution is wrong,
so don't use it.\n
\n
\n
\n
\n
Thank you for reading,\n
Martino \n
\n


*/
